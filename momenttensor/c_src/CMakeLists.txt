CMAKE_MINIMUM_REQUIRED(VERSION 2.6 FATAL_ERROR)
PROJECT (compearth)
ENABLE_LANGUAGE(C)
IF (COMPEARTH_MAKE_FINTER)
   ENABLE_LANGUAGE(Fortran)
ENDIF()
ENABLE_TESTING()

#SET(CMAKE_BUILD_TYPE Release)
# Add modules for finding requisites
SET(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/CMakeModules)
# For testing
SET(CMAKE_TESTING_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/testing)
# For binaries
SET(CMAKE_BINARY_DIR  ${CMAKE_CURRENT_SOURCE_DIR}/bin)
# For libraries
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/lib)
SET(LIBRARY_OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/lib)
IF (COMPEARTH_MAKE_FINTER)
SET(CMAKE_Fortran_MODULE_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include)
ENDIF()

IF (COMPEARTH_USE_MKL)
   MESSAGE("Using MKL")
   FIND_PACKAGE(MKL REQUIRED)
ELSE ()
   MESSAGE("Using BLAS/LAPACK")
   FIND_PACKAGE(CBLAS REQUIRED)
   FIND_PACKAGE(LAPACKE REQUIRED)
ENDIF(COMPEARTH_USE_MKL)

IF (CMAKE_BUILD_TYPE STREQUAL "DEBUG")
    message("debug mode")
    SET(COMPEARTH_DEBUG_SRC 1)
ELSE ()
    SET(COMPEARTH_DEBUG_SRC 0)
ENDIF ()

ADD_SUBDIRECTORY(include)

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/include)

IF (COMPEARTH_USE_MKL)
   INCLUDE_DIRECTORIES(${MKL_INCLUDE_DIR})
ELSE()
   INCLUDE_DIRECTORIES(${LAPACKE_INCLUDE_DIR})
   INCLUDE_DIRECTORIES(${CBLAS_INCLUDE_DIR})
ENDIF (COMPEARTH_USE_MKL)

SET (SRCS angleMT.c auxiliaryPlane.c beta2u.c cart2sph.c
          CMTdecom.c CMTdecomIso.c CMT2faultpar.c
          CMT2m0.c CMT2mw.c CMT2TT.c
          convertMT.c fangle.c eulerUtil_fangleSigned.c eulerUtil_rotmat.c
          eulerUtil_rotmatGen.c gamma2v.c h2theta.c lam2lune.c
          lam2nualpha.c lam2phizeta.c lamsort.c lune2lam.c lune2rect.c
          m02hdur.c m02mw.c mw2m0.c Mvec2Mmat.c
          normal2strdip.c normMat.c normMT.c nualpha2lam.c
          privateFunctions.c rect2lune.c standardDecomposition.c
          tape2015Eqn7.c theta2h.c transform_mat.c 
          tt2cmt.c u2beta.c U2pa.c Udetcheck.c Uorth.c
          v2gamma.c xyz2latlon.c xyz2tp.c
)
IF (COMPEARTH_MAKE_FINTER)
   SET (SRCS ${SRCS} compearth.F90)
ENDIF()

ADD_LIBRARY(compearth_shared SHARED ${SRCS})
ADD_LIBRARY(compearth_static STATIC ${SRCS})
ADD_EXECUTABLE(app2015 unit_tests/app2015.c)
ADD_EXECUTABLE(miscCheck unit_tests/checks.c) 
ADD_EXECUTABLE(xdecomp unit_tests/decompose.c unit_tests/cmopad.c)

SET_TARGET_PROPERTIES(compearth_shared PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${LIBRARY_OUTPUT_PATH})
SET_TARGET_PROPERTIES(compearth_static PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${LIBRARY_OUTPUT_PATH})
SET_TARGET_PROPERTIES(app2015 PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_TESTING_OUTPUT_DIRECTORY}) 
SET_TARGET_PROPERTIES(miscCheck PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_TESTING_OUTPUT_DIRECTORY})
SET_TARGET_PROPERTIES(xdecomp PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_TESTING_OUTPUT_DIRECTORY})

SET (LINK_LIB_ALL compearth_shared)
IF (COMPEARTH_USE_MKL)
   SET (LINK_LIB_ALL ${LINK_LIB_ALL} ${MKL_LIBRARY}) 
ELSE ()
   SET (LINK_LIB_ALL ${LINK_LIB_ALL} ${LAPACKE_LIBRARY} ${LAPACK_LIBRARY} ${CBLAS_LIBRARY} ${BLAS_LIBRARY} -lgfortran)
ENDIF ()

TARGET_LINK_LIBRARIES(app2015 ${LINK_LIB_ALL})
TARGET_LINK_LIBRARIES(miscCheck ${LINK_LIB_ALL})
TARGET_LINK_LIBRARIES(xdecomp ${LINK_LIB_ALL})

#ADD_TEST(ap2015Test ${CMAKE_TESTING_OUTPUT_DIRECTORY}/app2015)
ADD_TEST(NAME miscCheckTest
         WORKING_DIRECTORY ${CMAKE_TESTING_OUTPUT_DIRECTORY}
         COMMAND miscCheck)
ADD_TEST(NAME app2015Test
         WORKING_DIRECTORY ${CMAKE_TESTING_OUTPUT_DIRECTORY}
         COMMAND app2015)
ADD_TEST(NAME decompositionTest
         WORKING_DIRECTORY ${CMAKE_TESTING_OUTPUT_DIRECTORY}
         COMMAND xdecomp)

